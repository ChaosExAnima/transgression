<?xml version="1.0"?>
<ruleset name="Transgression">
	<description>Transgression ruleset</description>
	<rule ref="NeutronStandard" />
	<rule ref="NeutronStandard.Functions.LongFunction.LongFunction">
		<severity>0</severity>
	</rule>
	<rule ref="NeutronStandard.Functions.DisallowCallUserFunc.CallUserFunc">
		<severity>0</severity>
	</rule>
	<file>./src</file>
	<file>./plugin</file>

	<!-- How to scan -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<arg value="sp" /> <!-- Show sniff and progress -->
	<arg name="basepath" value="./" /><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors" />
	<arg name="extensions" value="php" />
	<arg name="parallel" value="8" /><!-- Enables parallel processing when available for faster
	results. -->
	<arg name="tab-width" value="4" />

	<!-- Rules: Check PHP version compatibility -->
	<!--
	https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions -->
	<config name="testVersion" value="8.2-" />
	<!-- https://github.com/PHPCompatibility/PHPCompatibilityWP -->
	<rule ref="PHPCompatibilityWP" />

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!--
	https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->
	<config name="minimum_supported_wp_version" value="6.1" />
	<rule ref="WordPress">
		<!-- Conflicts with Neutron standard -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />
		<exclude name="Generic.Formatting.MultipleStatementAlignment.NotSameWarning" />
		<exclude name="Generic.PHP.DiscourageGoto.Found" />
		<exclude name="Generic.PHP.Syntax.PHPSyntax" />
		<exclude name="Generic.WhiteSpace.ScopeIndent" />
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket" />
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine" />
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments" />
		<exclude name="Squiz.PHP.EmbeddedPhp.ContentAfterOpen" />
		<exclude name="WordPress.Arrays.MultipleStatementAlignment" />
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.NonVariableAssignmentFound" />
		<exclude name="WordPress.Files.FileName.InvalidClassFileName" />
		<exclude name="WordPress.PHP.YodaConditions" />
		<exclude name="WordPress.PHP.DisallowShortTernary" />
		<exclude name="WordPress.PHP.DiscouragedPHPFunctions" />
	</rule>
	<rule ref="WordPress.Security">
		<type>warning</type>
		<properties>
			<property name="customSanitizingFunctions" type="array">
				<element value="base64_decode" />
			</property>
		</properties>
	</rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<!-- Value: replace the function, class, and variable prefixes used. Separate multiple
			prefixes with a comma. -->
			<property name="prefixes" type="array" value="transgression" />
		</properties>
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.DynamicHooknameFound" />
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals" />
	</rule>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Value: replace the text domain used. -->
			<property name="text_domain" type="array" value="transgression" />
		</properties>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
		<properties>
			<property name="blank_line_check" value="true" />
		</properties>
	</rule>
	<rule ref="Squiz.Commenting">
		<severity>0</severity>
	</rule>
	<rule ref="Generic.Commenting">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.WP.GlobalVariablesOverride">
		<properties>
			<property name="treat_files_as_scoped" value="true" />
		</properties>
	</rule>
</ruleset>